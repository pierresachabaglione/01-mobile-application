# SPDX-FileCopyrightText: 2022 - 2024 Benoit Rolandeau <benoit.rolandeau@allcircuits.com>
# SPDX-FileCopyrightText: 2023 Anthony Loiseau <anthony.loiseau@allcircuits.com>
#
# SPDX-License-Identifier: MIT

# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - build/**
    - lib/generated/**

  errors:
    missing_required_param: error
    missing_return: error
    missing_enum_constant_in_switch: error

  language:
    strict-casts: true

# To know the available rules to enable or disable, see https://dart.dev/tools/linter-rules
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Declare method return types.
    always_declare_return_types: true

    # Separate the control structure expression from its statement.
    always_put_control_body_on_new_line: true

    # Avoid relative imports for files in lib/.
    always_use_package_imports: true

    # Annotate redeclared members.
    annotate_redeclares: true

    # Avoid annotating with dynamic when not required.
    avoid_annotating_with_dynamic: true

    # Avoid bool literals in conditional expressions.
    avoid_bool_literals_in_conditional_expressions: true

    # Don't explicitly catch Error or types that implement it.
    avoid_catching_errors: true

    # Avoid method calls or property accesses on a dynamic target.
    avoid_dynamic_calls: true

    # Avoid overloading operator == and hashCode on classes not marked @immutable.
    avoid_equals_and_hash_code_on_mutable_classes: true

    # Avoid escaping inner quotes by converting surrounding quotes.
    avoid_escaping_inner_quotes: true

    # Avoid final for parameter declarations.
    avoid_final_parameters: true

    # Don't implement classes that override ==.
    avoid_implementing_value_types: true

    # Don't declare multiple variables on a single line.
    avoid_multiple_declarations_per_line: true

    # Don't check for null in custom == operators.
    avoid_null_checks_in_equality_operators: true

    # Avoid positional boolean parameters.
    avoid_positional_boolean_parameters: true

    # Avoid private typedef functions.
    avoid_private_typedef_functions: true

    # Avoid redundant argument values.
    avoid_redundant_argument_values: true

    # Avoid relative imports for files in lib/.
    avoid_relative_lib_imports: true

    # Avoid returning this from methods just to enable a fluent interface.
    avoid_returning_this: true

    # Avoid setters without getters.
    avoid_setters_without_getters: true

    # Avoid slow asynchronous dart:io methods.
    avoid_slow_async_io: true

    # Avoid.toString() in production code since results may be minified.
    avoid_type_to_string: true

    # Avoid defining unused parameters in constructors.
    avoid_unused_constructor_parameters: true

    # Avoid async functions that return void.
    avoid_void_async: true

    # Avoid using web-only libraries outside Flutter web plugin packages.
    avoid_web_libraries_in_flutter: true

    # Cancel instances of dart:async StreamSubscription.
    cancel_subscriptions: true

    # Don't cast a nullable value to a non nullable type.
    cast_nullable_to_non_nullable: true

    # Close instances of dart:core Sink.
    close_sinks: true

    # Sort combinator names alphabetically.
    combinators_ordering: true

    # Only reference in-scope identifiers in doc comments.
    comment_references: true

    # Missing conditional import.
    conditional_uri_does_not_exist: true

    # Missing deprecated annotation.
    deprecated_consistency: true

    # Avoid using deprecated elements from within the package in which they are declared.
    deprecated_member_use_from_same_package: true

    # Adhere to Effective Dart Guide directives sorting conventions.
    directives_ordering: true

    # Don't invoke asynchronous functions in non-async blocks.
    discarded_futures: true

    # Do not use environment declared variables.
    do_not_use_environment: true

    # Document ignore comments.
    document_ignores: true

    # Put a single newline at end of file.
    eol_at_end_of_file: true

    # Use Flutter TODO format: // TODO(username): message, https://URL-to-issue.
    flutter_style_todos: true

    # Use case expressions that are valid in Dart 3.0.
    invalid_case_patterns: true

    # Start multiline strings with a newline.
    leading_newlines_in_multiline_strings: true

    # Name libraries using lowercase_with_underscores.
    library_names: true

    # Boolean expression composed only with literals.
    literal_only_boolean_expressions: true

    # Use matching super parameter names.
    matching_super_parameters: true

    # A code block is missing a specified language.
    missing_code_block_language_in_doc_comment: true

    # Missing whitespace between adjacent strings.
    missing_whitespace_between_adjacent_strings: true

    # Don't compare boolean expressions to boolean literals.
    no_literal_bool_comparisons: true

    # Don't put any logic in createState.
    no_logic_in_create_state: true

    # Avoid calling toString() on runtimeType.
    no_runtimeType_toString: true

    # Don't assign a variable to itself.
    no_self_assignments: true

    # Noop primitive operations.
    noop_primitive_operations: true

    # Omit type annotations for local variables.
    omit_local_variable_types: true

    # Only throw instances of classes extending either Exception or Error.
    only_throw_errors: true

    # Don't reassign references to parameters of functions or methods.
    parameter_assignments: true

    # Prefer putting asserts in initializer lists.
    prefer_asserts_in_initializer_lists: true

    # Prefer asserts with message.
    prefer_asserts_with_message: true

    # Prefer const with constant constructors.
    prefer_const_constructors: true

    # Use => for short members whose body is a single return statement.
    prefer_expression_function_bodies: true

    # Prefer final in for-each loop variable if reference is not reassigned.
    prefer_final_in_for_each: true

    # Prefer final for variable declarations if they are not reassigned.
    prefer_final_locals: true

    # Prefer if elements to conditional expressions where possible.
    prefer_if_elements_to_conditional_expressions: true

    # Prefer using ?? operators.
    prefer_if_null_operators: true

    # Prefer int literals over double literals.
    prefer_int_literals: true

    # Prefer using mixins.
    prefer_mixin: true

    # Prefer null-aware method calls.
    prefer_null_aware_method_calls: true

    # Prefer using null-aware operators.
    prefer_null_aware_operators: true

    # Use spread collections when possible.
    prefer_spread_collections: true

    # Don't use the Null type, unless you are positive that you don't want void.
    prefer_void_to_null: true

    # Document all public members.
    public_member_api_docs: true

    # Use secure urls in pubspec.yaml.
    secure_pubspec_urls: true

    # Use SizedBox shrink and expand named constructors.
    sized_box_shrink_expand: true

    # Sort unnamed constructor declarations first.
    sort_unnamed_constructors_first: true

    # Test type of argument in operator ==(Object other).
    test_types_in_equals: true

    # Avoid throw in finally block.
    throw_in_finally: true

    # Tighten type of initializing formal.
    tighten_type_of_initializing_formals: true

    # Type annotate public APIs.
    type_annotate_public_apis: true

    # Future results in async function bodies must be awaited or marked unawaited using dart:async.
    unawaited_futures: true

    # Unnecessary await keyword in return.
    unnecessary_await_in_return: true

    # Don't create a lambda when a tear-off will do.
    unnecessary_lambdas: true

    # Don't specify the late modifier when it is not needed.
    unnecessary_late: true

    # Unnecessary null aware operator on extension on a nullable type.
    unnecessary_null_aware_operator_on_extension_on_nullable: true

    # Unnecessary null checks.
    unnecessary_null_checks: true

    # Unnecessary raw string.
    unnecessary_raw_strings: true

    # Avoid using unnecessary statements.
    unnecessary_statements: true

    # Use ColoredBox.
    use_colored_box: true

    # Use DecoratedBox.
    use_decorated_box: true

    # Use enums rather than classes that behave like enums.
    use_enums: true

    # Prefer intValue.isOdd/isEven instead of checking the result of % 2.
    use_is_even_rather_than_modulo: true

    # Use predefined named constants.
    use_named_constants: true

    # Use raw string to avoid escapes.
    use_raw_strings: true

    # Use a setter for operations that conceptually change a property.
    use_setters_to_change_properties: true

    # Start the name of the method with to/_to or as/_as if applicable.
    use_to_and_as_if_applicable: true

    # Use truncating division.
    use_truncating_division: true

    # Use valid regular expression syntax.
    valid_regexps: true

    # Don't assign to void.
    void_checks: true
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
